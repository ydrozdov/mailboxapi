<?php

namespace Mailbox\Utils;

use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-02-05 at 22:26:34.
 */
class PaginatorTest extends TestCase 
{
    const ITEMS_PER_PAGE = 20;
    
    /**
     * @var Paginator
     */
    protected $object;

    /**
     * @expectedException \LogicException
     */
    public function testGetItemsThrowsAnException() {
        $this->object = new Paginator(self::ITEMS_PER_PAGE);
        $this->object->getItems(1);
    }

    public function testGetItemsReturnsEmptyResultWhenPageIsNegative() {
        $this->object = new Paginator(self::ITEMS_PER_PAGE);
        
        $queryBuilderMock = $this->getQueryBuilderMock();
        
        $this->object->setQueryBuilder($queryBuilderMock);
        $result = $this->object->getItems($page=-1);
        $this->assertInternalType('array', $result);
        $this->assertArrayNotHasKey('items', $result);
        $this->assertArrayHasKey('page', $result);
        $this->assertArrayHasKey('totalPages', $result);
    }
    
    public function testGetItemsCallsLimit()
    {
        $this->object = new Paginator(self::ITEMS_PER_PAGE);
        
        $queryBuilderMock = $this->getQueryBuilderMock();
        
        $queryBuilderMock->expects($this->once())
                ->method('skip')
                ->will($this->returnValue($queryBuilderMock));
        
        $queryBuilderMock->expects($this->once())
                ->method('limit')
                ->will($this->returnValue($queryBuilderMock))
                ->with(self::ITEMS_PER_PAGE);
        
        $this->object->setQueryBuilder($queryBuilderMock);
        
        $this->object->getItems($page=1);
    }
    
    /**
     * @dataProvider skipProvider
     */
    public function testGetItemsCallsSkip($page, $expectedSkipParam)
    {
        $this->object = new Paginator(self::ITEMS_PER_PAGE);
        
        $queryBuilderMock = $this->getQueryBuilderMock(self::ITEMS_PER_PAGE * 10);
        
        $queryBuilderMock->expects($this->once())
                ->method('skip')
                ->will($this->returnValue($queryBuilderMock))
                ->with($expectedSkipParam);
        
        $queryBuilderMock->expects($this->once())
                ->method('limit')
                ->will($this->returnValue($queryBuilderMock));
        
        $this->object->setQueryBuilder($queryBuilderMock);
        
        $this->object->getItems($page);
    }
    
    public function testGetItemsReturnsArrayWithItemKey()
    {
        $this->object = new Paginator(self::ITEMS_PER_PAGE);
        
        $queryBuilderMock = $this->getQueryBuilderMock();
        
        $queryBuilderMock->expects($this->once())
                ->method('skip')
                ->will($this->returnValue($queryBuilderMock));
        
        $queryBuilderMock->expects($this->once())
                ->method('limit')
                ->will($this->returnValue($queryBuilderMock));
        
        $this->object->setQueryBuilder($queryBuilderMock);
        
        $result = $this->object->getItems($page=1);
        $this->assertInternalType('array', $result);
        $this->assertArrayHasKey('items', $result);
        $this->assertArrayHasKey('page', $result);
        $this->assertArrayHasKey('totalPages', $result);
    }
    
    public function skipProvider()
    {
        return [
            [1, 0],
            [2, self::ITEMS_PER_PAGE],
            [3, 2 * self::ITEMS_PER_PAGE]
        ];
    }

    /**
     * @dataProvider totalPagesProvider
     */
    public function testGetTotalPages($totalItems, $expectedPages) {
        $this->object = new Paginator(self::ITEMS_PER_PAGE);
        
       $queryBuilderMock = $this->getQueryBuilderMock($totalItems);
       $this->object->setQueryBuilder($queryBuilderMock);
       $this->assertEquals($expectedPages, $this->object->getTotalPages());
    }
    
    public function totalPagesProvider()
    {
        return [
            [10, 1],
            [30, 2],
            [32, 2],
            [40, 2],
            [41, 3],
            [1, 1]
        ];
    }

    /**
     * @dataProvider totalProvider
     */
    public function testGetTotal($totalItems) {
       $this->object = new Paginator(self::ITEMS_PER_PAGE);
        
       $queryBuilderMock = $this->getQueryBuilderMock($totalItems);
       $this->object->setQueryBuilder($queryBuilderMock);
       $this->assertEquals($totalItems, $this->object->getTotal());
    }
    
    public function totalProvider()
    {
        return [
            [10],
            [20],
            [15],
            [27]
        ];
    }
    
    protected function getQueryBuilderMock($totalItems=20)
    {
        $queryBuilderMock = $this->getMockBuilder(\Doctrine\ODM\MongoDB\Query\Builder::class)
                ->disableOriginalConstructor()
                ->setMethods(['getQuery', 'skip', 'limit'])
                ->getMock();
        
        $queryMock = $this->getMockBuilder(\Doctrine\ODM\MongoDB\Query\Query::class)
                ->disableOriginalConstructor()
                ->setMethods(['execute'])
                ->getMock();
        $cursorMock = $this->getMockBuilder(\Doctrine\MongoDB\Cursor::class)
                ->disableOriginalConstructor()
                ->setMethods(['count', 'toArray'])
                ->getMock();
 
        $cursorMock->expects($this->once())
                 ->method('count')
                 ->will($this->returnValue($totalItems));
        
        $cursorMock->expects($this->any())
                 ->method('toArray')
                 ->will($this->returnValue([]));
        
        $queryMock->expects($this->atLeastOnce())
                 ->method('execute')
                 ->will($this->returnValue($cursorMock));
        
        $queryBuilderMock->expects($this->atLeastOnce())
                 ->method('getQuery')
                 ->will($this->returnValue($queryMock));
        
        return $queryBuilderMock;
    }

}
